第9章 Java中的线程

1.在开发过程中，合理地使用线程池能够带来3个好处
a.降低资源消耗。通过重复利用已经创建的线程降低线程创建和销毁造成的消耗。
b.提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。
c.提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一
分配、调优和监控。

===线程池的实现原理===
1.线程池的处理流程
1) 线程池判断核心线程池里的线程是否都在执行任务。如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在
执行任务，则进入下个流程
2)线程池判断工作队列是否已经满。如果工作队列没有满，则将新提交的任务存储在这个工作队列中。如果工作队列满了，则进入下个
流程。
3）线程池判断线程池的线程是否都处于工作状态。如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略
来处理这个任务。
2.ThreadPoolExecutor执行execute方法分为下面4种情况
1)如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）
2)如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue
3)如果无法将任务加入BlockingQueue(队列已满)，则创建新的线程来处理任务（注意，执行这一步骤需要获取全局锁）
4)如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectedExecution()方法
ThreadPoolExecutor采取上述步骤的总体设计思路，是为了执行execute()方法时，尽可能地避免获取全局锁（那将会是一个严重
的可伸缩瓶颈）。在ThreadPoolExecutor完成预热之后（当前运行的线程数大于等于corePoolSize），几乎所有的execute()方法调用
都是执行步骤2，而步骤2不需要获取全局锁。


===线程池的使用===
1.线程池的创建
new ThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,milliseconds,runnableTaskQueue,handler);
参数说明：
1.1corePoolSize（线程池的基本大小）：当提交一个任务到线程时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建，等到
            需要执行的任务数大于线程池基本大小时就不在创建。如果调用了线程池的prestartAllCoreThreads()方法，线程池就会提前创建并启动所有基本线程。
1.2runnableTaskQueue(任务队列):用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。
      ArrayBlockingQueue:是一个基于数组结构的有界阻塞队列，此队列按FIFO原则对元素进行排序。
      LinkedBlockingQueue:一个基于链表结构的阻塞队列，此队列按FIFO排序元素，吞吐量通常要高于ArrayBlockingQueue.静态工程方法Executors.newFixedThreadPool()
                          使用了这个队列。
      SynchronousQueue:一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue,静态工厂
                       方法Executors.newCachedThreadPool使用这个队列。
      PriorityBlockingQueue:一个具有优先级的无限阻塞队列
1.3maximunPoolSize(线程池最大数量)：线程池允许创建的最大线程数。如果队列满了并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是，
                       如果使用了无界的任务队列这个参数就没什么效果了。
1.4 ThreadFactory:用于设置创建线程池的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。使用开源框架guava提供的ThreadFactoryBuilder可以快速给线程池里的线程
                  设置有意义的名字，代码如下：
                  new ThreadFactoryBuilder().setNameFormat("XX-task-%d").build();
1.5 RejectedExecutionHandler(饱和策略)：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的任务。这个策略默认情况下是AbortPolicy，
                   表示无法处理新任务是抛出异常。在JDK1.5中Java线程池框架提供了以下4种策略
                   AbortPolicy:直接抛出异常
                   CallerRunsPolicy:只用调用者所在线程来运行任务
                   DiscardOldestPolicy:丢弃队列里最近的一个任务，并执行当前任务。
                   DiscardPolicy:不处理，丢弃掉
                   当然，也可以根据应用场景需要来实现RejectExecutionHandler接口自定义策略。如记录日志或持久化存储不能处理的任务。
1.6 keepAliveTime(线程活动保持时间)：线程池的工作线程空闲后，保持存活的时间。所以，如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用率。
1.7TimeUnit(线程活动保持时间的单位)：可选的单位有天（DAYS）、小时（HOURS）、分钟（MINUTES）、毫秒（MILLISECONDS）、微秒（MICROSECONDS，千分之一毫秒）和
   纳秒（NANOSECONDS,千分之一微秒）

===向线程池提交任务===
可以使用两种方法向线程池提交任务，分别是execute()和submit()方法
execute()方法用于提交不需要返回值的任务
submit()方法用于提交需要返回值的任务。线程池会返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过
future的get()方法来获取返回值。get()方法会阻塞当前线程直到任务完成，

===关闭线程池===
可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。他们的原理是遍历线程池中的工作线程，然后逐个调用
线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别。
区别：shutdownNow首先将线程池的状态设置成STOP,然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表。
     shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。
只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回ture。当所有的任务都已经关闭后，才表示线程池关闭成功，这时
isTerminaed方法会返回true.
通常调用shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法。


===合理地配置线程池===
要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析
1.任务的性质：CPU密集型任务、IO密集型任务和混合型任务
2.任务的优先级：高、中和低
3.任务的执行时间：长、中和短
4.任务的依赖性：是否依赖其他系统资源，如数据库连接。
   性质不同的任务可以用不同规模的线程池分开处理。CPU密集型任务应配置尽可能小的线程，如配置Ncpu+1个线程的线程池。
由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如2*Ncpu。混合型的任务，入过可以拆分，将其拆分成一个CPU
密集型任务和一个IO密集型任务，只要这两个任务执行时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。
   优先级不同的任务可以使用优先级队列PriorityBlockingQueue来处理
   执行时间不同的任务可以交给不同规模的线程池了处理，或者可以使用优先级队列，让执行时间短的任务先执行
   依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，等待的时间越长，则CPU空闲时间就越长，那么线程数应该设置
   越大，这样才能更好地利用CPU.

===线程池的监控===
taskCount:线程池需要执行的任务数量
completedTaskCount:线程池在运行过程中已完成的任务数量，小于或等于taskCount
largestPoolSize:线程池里曾经创建过的最大线程数量
getPoolSize:线程池的线程数量
getActiveCount:获取活动的线程数

















