第5章 Java中的锁
====Lock接口===
1.锁是用来控制多个线程访问共享资源的方式。
2.在Lock接口出现之前，Java程序是靠synchronized关键字实现锁的功能的，而Java SE 5之后，并发包中新增了Lock接口（以及相关实现类）用来实现锁功能，
它提供了与synchronized关键字类似的同步功能，只是在使用时需要显示地获取和释放锁。
3.虽然缺少了（通过synchronized块或者方法提供的）隐式获取释放锁的便捷性，但是确拥有了锁获取与释放的可操作性、可中断的获取锁以及超时获取锁等多种
synchronized关键字所不具备的同步特性。而且对于一些比较复杂的获取释放锁的应用场景，Lock很容易实现。
4.在finally块中释放锁，目的是保证在获取锁之后，最终能够被释放。不要将获取锁的过程写在try块中，因为如果在获取锁（自定义锁的实现）时发生了异常，异常
抛出的同时，也会导致锁无故释放。
5.Lock接口提供synchronized关键字所不具备的主要特性如下：
a.尝试非阻塞地获取锁
b.能被中断地获取锁
c.超时获取锁


===队列同步器===
1.队列同步器AbstractQueuedSynchronizer(以下简称队列同步器)，是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示同步状态，通过FIFO
队列来完成资源获取线程的排队工作。
2.同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。
3.同步器提供的3个方法（getState()、setState(int newState)和compareAndSetState(int expect,int update)）来进行状态变量的管理，这些方法都是线程安全的。
4.子类推荐被定义为自定义同步组件的静态内部类，同步器自身没有实现任何同步接口，它仅仅是定义了若干同步状态获取和释放的方法来供自定义同步组件使用，同步器既
可以支持独占式地获取同步状态也可以支持共享式地获取同步状态。
5.同步器是实现锁（也可以是任意同步组件）的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。
6.锁是面向使用者的，它定义了使用者与锁交互的接口（比如可以允许两个线程并行访问），隐藏了实现细节；
7.同步器面向的是锁的实现者，它简化了锁的实现方式，屏蔽了同步状态管理、线程排队、等待与唤醒等底层操作。
8.锁和同步器很好地隔离了使用者和实现者锁需要关注的领域。
9.同步器的设计是基于模板方法模式的，也就是说，使用者需要继承同步器并重写指定的方法，随后将同步器组合在自定义同步组件的实现中，并调用同步器提供的模板方法，
而这些模板方法将会调用使用者重写的方法。
10.同步器可重写的方法
a.protected boolean tryAcquire(int arg):独占获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再进行CAS设置同步状态
b.protected boolean tryRelease(int arg):独占式释放同步状态，等待获取同步状态的线程将有机会获取同步状态
c.protected int tryAcquiredShared(int arg):共享式获取同步状态，返回大于等于0的值，表示获取成功，反之，获取失败
d.protected boolean tryReleaseShared(int arg):共享式释放同步状态
e.protected boolean isHeldExclusively():当前同步器是否在独占模式下被线程占用，一般该方法表示是否被当前线程所独占。
11.同步器提供的模板方法
a.void acquire(int arg):独占式获取同步状态，如果当前线程获取同步状态成功，则由该方法返回，否则，将会进入同步队列等待，该方法将会调用重写的tryAcquire(int arg)方法
b.void acquireInterruptibly(int arg):与acquire(int arg)相同，但是该方法响应中断，当前线程未获取到同步状态而进入同步队列中，如果当前线程被中断，则该方法
  会抛出InterruptedException并返回
c.boolean tryAcquireNanos(int arg,long nanos):在acquireInterruptibly(int arg)基础上增加了超时限制，如果当前线程在超时时间内没有获取到同步状态，
  那么将会返回false,如果获取到了返回true
d.void acquireShared(int arg):共享式的获取同步状态，如果当前线程未获取到同步状态，将会进入同步队列等待，与独占式获取的主要区别是在同一时刻可以有多
  个线程获取同步状态
e.void acquireSharedInterruptibly(int arg)：与acquiedShared(int arg)相同，该方法响应中断。
f.boolean tryAcquireSharedNanos(int arg,long nanos):在acquireSharedInterruptibly(int arg)基础上增加了超时限制
g.boolean release(int arg):独占式的释放同步状态，该方法会在释放同步状态之后，将同步队列中第一个节点包含的线程唤醒。
h.boolean releaseShared(int arg):共享式的释放同步状态
i.Collection<Thread> getQueuedThreads()：获取等待在同步队列上的线程集合。
12.同步器提供的模板方法基本上分为3类：独占式获取与释放同步状态、共享式获取与释放同步状态和查询同步队列中等待线程情况。
13.自定义同步组件将使用同步器提供的模板方法来实现自己的同步语义。

===队列同步器的实现分析===
==同步队列==
1.同步器拥有首节点(head)和尾节点(tail),没有成功获取同步状态的线程将会成为节点加入该队列的尾部。
2.同步器提供了一个安全的把节点加入队列的方法：compareAndSetTail(Node expect,Node update)
3.同步器队列遵循FIFO,首节点是获取同步状态成功的节点，首节点的线程在释放同步状态时，将会唤醒后继节点，而后继节点将会在获取同步状态成功时将自己设置为首届点
4.设置首节点是通过获取成功的线程来完成的，由于只有一个线程能够成功获取到同步状态，因此设置头节点的方法并不需要使用CAS来保证。
==独占式同步状态获取与释放==
1.通过调用同步器的acquire(int arg)方法可以获取同步状态，该方法对中断不敏感，也就是由于线程获取同步状态失败后进入同步队列中，后继对线程进行中断操作时，线程不会从
  同步队列中移出。
public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
}
上述代码的主要逻辑是：
首先调用自定义同步器实现的tryAcquire(int arg)方法，该方法保证线程安全的获取同步状态，如果同步状态获取失败，则构造同步节点（独占式Node.EXCLUSIVE，同一时刻
只能有一个线程成功获取同步状态）并通过addWaiter(Node node)方法将该节点加入到同步队列的尾部，最后调用acquireQueued(Node node,int arg)方法，使得该节点以“死循环”
的方式获取同步状态。如果获取不到则阻塞节点中的线程，而被阻塞线程的唤醒主要依靠前驱节点的出队或阻塞线程被中断来实现。

 //添加到同步队列尾部
 private Node addWaiter(Node mode) {
        Node node = new Node(Thread.currentThread(), mode);
        // Try the fast path of enq; backup to full enq on failure
        Node pred = tail;
        if (pred != null) {
            node.prev = pred;
            if (compareAndSetTail(pred, node)) {
                pred.next = node;
                return node;
            }
        }
        enq(node);
        return node;
}

private Node enq(final Node node) {
        for (;;) {
            Node t = tail;
            if (t == null) { // Must initialize
                if (compareAndSetHead(new Node()))
                    tail = head;
            } else {
                node.prev = t;
                if (compareAndSetTail(t, node)) {
                    t.next = node;
                    return t;
                }
            }
        }
}
//自旋
final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }

 private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
         int ws = pred.waitStatus;
         if (ws == Node.SIGNAL)
             /*
              * This node has already set status asking a release
              * to signal it, so it can safely park.
              */
             return true;
         if (ws > 0) {
             /*
              * Predecessor was cancelled. Skip over predecessors and
              * indicate retry.
              */
             do {
                 node.prev = pred = pred.prev;
             } while (pred.waitStatus > 0);
             pred.next = node;
         } else {
             /*
              * waitStatus must be 0 or PROPAGATE.  Indicate that we
              * need a signal, but don't park yet.  Caller will need to
              * retry to make sure it cannot acquire before parking.
              */
             compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
         }
         return false;
     }

只有前驱节点是头节点才能够尝试获取同步状态，原因如下：
a.头节点是成功获取到同步状态的节点，而头节点的线程释放了同步状态之后，将会唤醒后继节点，后继节点的线程被唤醒后需要检查自己的前驱节点是否是头节点
b.维护同步队列的FIFO原则
当同步状态获取成功之后，当前线程从acquire(int arg)方法返回，如果对于锁这种并发组件而言，代表着当前线程获取了锁
通过调用同步器release(int arg)方法可以释放同步状态
public final boolean release(int arg) {
        if (tryRelease(arg)) {
            Node h = head;
            if (h != null && h.waitStatus != 0)
                unparkSuccessor(h);
            return true;
        }
        return false;
    }

private void unparkSuccessor(Node node) {
        /*
         * If status is negative (i.e., possibly needing signal) try
         * to clear in anticipation of signalling.  It is OK if this
         * fails or if status is changed by waiting thread.
         */
        int ws = node.waitStatus;
        if (ws < 0)
            compareAndSetWaitStatus(node, ws, 0);

        /*
         * Thread to unpark is held in successor, which is normally
         * just the next node.  But if cancelled or apparently null,
         * traverse backwards from tail to find the actual
         * non-cancelled successor.
         */
        Node s = node.next;
        if (s == null || s.waitStatus > 0) {
            s = null;
            for (Node t = tail; t != null && t != node; t = t.prev)
                if (t.waitStatus <= 0)
                    s = t;
        }
        if (s != null)
            LockSupport.unpark(s.thread);
    }
==共享式同步状态获取与释放==
1.共享式获取与独占式获取最主要的区别在于同一时刻能够有多个线程同时获取到同步状态。
2.调用同步器的acquireShared(int arg)方法可以共享式获取同步状态
//当tryAcquireShared(arg)返回值大于等于0时说明可以获取同步状态
public final void acquireShared(int arg) {
        if (tryAcquireShared(arg) < 0)
            doAcquireShared(arg);
}

private void doAcquireShared(int arg) {
        final Node node = addWaiter(Node.SHARED);
        boolean failed = true;
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                if (p == head) {
                    int r = tryAcquireShared(arg);
                    if (r >= 0) {
                        setHeadAndPropagate(node, r);
                        p.next = null; // help GC
                        if (interrupted)
                            selfInterrupt();
                        failed = false;
                        return;
                    }
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }

与独占式一样，共享式获取也需要释放同步状态，通过调用releaseShared(int arg)方法可以释放同步状态。
public final boolean releaseShared(int arg) {
        if (tryReleaseShared(arg)) {
            doReleaseShared();
            return true;
        }
        return false;
    }
==响应中断的同步状态获取过程==
1.在Java 5之前，当一个线程获取不到锁而被阻塞在synchronized之外时，对该线程进行中断操作，此时该线程的中断标志会被修改，但线程依旧会阻塞在synchronized，等待获取锁
  在Java 5中，同步器提供了acquireInterruptibly(int arg)方法，这个方法在等待获取同步状态时，如果当前线程被中断，会立刻返回，并抛出InterruptedException
public final void acquireInterruptibly(int arg)
            throws InterruptedException {
        if (Thread.interrupted())
            throw new InterruptedException();
        if (!tryAcquire(arg))
            doAcquireInterruptibly(arg);
    }
private void doAcquireInterruptibly(int arg)
        throws InterruptedException {
        final Node node = addWaiter(Node.EXCLUSIVE);
        boolean failed = true;
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return;
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    throw new InterruptedException();
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
==独占式超时获取同步状态==
1.超时获取同步状态过程可以被视作响应中断获取同步状态过程的”增强版“。 doAcquireNanos(int arg,long nanosTimeout)方法在支持响应中断的基础上，增加了超时获取的特性。
public final boolean tryAcquireNanos(int arg, long nanosTimeout)
            throws InterruptedException {
        if (Thread.interrupted())
            throw new InterruptedException();
        return tryAcquire(arg) ||
            doAcquireNanos(arg, nanosTimeout);
    }
private boolean doAcquireNanos(int arg, long nanosTimeout)
            throws InterruptedException {
        if (nanosTimeout <= 0L)
            return false;
        final long deadline = System.nanoTime() + nanosTimeout;
        final Node node = addWaiter(Node.EXCLUSIVE);
        boolean failed = true;
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return true;
                }
                nanosTimeout = deadline - System.nanoTime();
                if (nanosTimeout <= 0L)
                    return false;
                if (shouldParkAfterFailedAcquire(p, node) &&
                    nanosTimeout > spinForTimeoutThreshold)
                    LockSupport.parkNanos(this, nanosTimeout);
                if (Thread.interrupted())
                    throw new InterruptedException();
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }

独占式超时获取同步状态和独占式获取同步状态在流程上非常相似，其主要区别在于为获取到同步状态的处理逻辑上。



===重入锁===
1.重入锁ReentrantLock,顾名思义，就是支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。
2.synchronized隐式支持重进入
3.ReentrantLock虽然没能像synchronized关键字一样支持隐式的重进入，但是在调用lock()方法时，已经获取到锁的线程，能够再次调用lock()方法获取锁而不被阻塞。
4.如果在绝对时间上，先对锁进行获取的请求一定先被满足，那么这个锁是公平的。反之，是不公平的。
5.事实上，公平的锁机制往往没有非公平的效率高，但是，并不是任何场景都是一TPS作为唯一的指标，公平锁能够减少”饥饿“发生的概率，等待越久的请求越是能够得到优先满足。
==重进入实现==
1.重进入是指任意线程在获取锁之后能够再次获取锁而不会被阻塞，该特性的实现需要解决以下两个问题
a.线程再次获取锁：锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是，则再次成功获取。
b.锁的最终释放：线程重复n次获取锁，随后在第n次释放锁后，其他线程能够获取到该锁。
2.ReentrantLock是通过组合自定义同步器来实现锁的获取与释放，以非公平性锁（默认的）实现为例说明
final boolean nonfairTryAcquire(int acquires) {
            final Thread current = Thread.currentThread();
            int c = getState();
            if (c == 0) {
                if (compareAndSetState(0, acquires)) {
                    setExclusiveOwnerThread(current);
                    return true;
                }
            }
            else if (current == getExclusiveOwnerThread()) {
                int nextc = c + acquires;
                if (nextc < 0) // overflow
                    throw new Error("Maximum lock count exceeded");
                setState(nextc);
                return true;
            }
            return false;
}
相应的释放锁的代码如下
 protected final boolean tryRelease(int releases) {
            int c = getState() - releases;
            if (Thread.currentThread() != getExclusiveOwnerThread())
                throw new IllegalMonitorStateException();
            boolean free = false;
            if (c == 0) {
                free = true;
                setExclusiveOwnerThread(null);
            }
            setState(c);
            return free;
        }
==公平与非公平获取锁的区别
1.公平性与否是针对获取锁而言的。回顾上边介绍的nonfairTryAcquire(int acquires)方法，对于非公平性锁，只要CAS设置同步状态成功，则表示当前线程获取了锁，而公平锁则不同，如下：
protected final boolean tryAcquire(int acquires) {
            final Thread current = Thread.currentThread();
            int c = getState();
            if (c == 0) {
                if (!hasQueuedPredecessors() &&
                    compareAndSetState(0, acquires)) {
                    setExclusiveOwnerThread(current);
                    return true;
                }
            }
            else if (current == getExclusiveOwnerThread()) {
                int nextc = c + acquires;
                if (nextc < 0)
                    throw new Error("Maximum lock count exceeded");
                setState(nextc);
                return true;
            }
            return false;
        }

与非公平锁获取同步状态唯一不同的就是判断条件多了hasQueuedPredecessors()方法，即加入了同步队列中当前节点是否有前驱节点的判断，如果该放入返回true,
则表示有线程比当前线程更早地请求获取锁。
2.通过观察FairAndUnfairTest输出的结果，我们可以得出结论
公平锁每次都是从同步队列中的第一个节点获取锁，而非公平锁出现了一个线程连续获取锁的情况。为什么会出现连续获取锁的情况呢？当一个线程请求锁时，只要获取了同步
状态即成功获取锁，在这个前提下，刚释放锁的线程再次获取同步状态的几率会非常大，使得其他线程只能在同步队列中等待。
3.把非公平锁设置为默认实现是因为在线程上下文切换时非公平锁切换的次数会小，因此非公平锁开销更小
4.公平锁保证了锁的获取按照FIFO原则，而代价是进行大量的线程切换。非公平锁虽然可能造成线程”饥饿“，但极少的线程切换，保证了其更大的吞吐量



===读写锁===
1.读写锁在同一时刻可以允许多个读线程访问，但是在写线程访问时，所有读写线程和其他写线程均被阻塞。
2.读写锁维护了一对锁，一个读锁和一个写锁，通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大的提升。
3.除了保证写操作对读操作的可见性以及并发性的提升之外，读写锁能够简化读写交互场景的编程方式。
4.Java并发包中提供读写锁的实现是ReentrantReadWriteLock.它提供的特性如下：
a.公平性选择：支持非公平（默认）和公平的锁获取方式，吞吐量还是非公平优于公平
b.重进入：该锁支持重进入，
c.锁降级：遵循获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁
5.ReadWriteLock仅定义了获取读锁和写锁的两个方法，即readLock()方法和writeLock()方法，而其实现——ReentrantReadWriteLock。
6.通过一个缓存示例说明读写锁的使用方式Cache.java


==读写锁的实现分析==
1.读写状态设计
将同步状态”按位切割使用“，读写锁将变量切分成两个部分，高16位表示读，低16位表示写。
假设当前同步状态值为S,则
写状态：S & 0X0000FFFF(将高16位全部抹去)
读状态：S >>> 16(无符号补0右移16位)
当写状态增加1时等于S+1
当读状态增加1时等于S+(1<<16),也就是S+0X00010000
根据状态的划分得出一个结论：S不等于0时，当写状态（S&0X0000FFFF）等于0时，读状态(S>>>16)大于0，即读锁已被获取

==写锁的获取与释放==
获取
protected final boolean tryAcquire(int acquires) {
            /*
             * Walkthrough:
             * 1. If read count nonzero or write count nonzero
             *    and owner is a different thread, fail.
             * 2. If count would saturate, fail. (This can only
             *    happen if count is already nonzero.)
             * 3. Otherwise, this thread is eligible for lock if
             *    it is either a reentrant acquire or
             *    queue policy allows it. If so, update state
             *    and set owner.
             */
            Thread current = Thread.currentThread();
            int c = getState();
            int w = exclusiveCount(c);
            if (c != 0) {
                // (Note: if c != 0 and w == 0 then shared count != 0)
                if (w == 0 || current != getExclusiveOwnerThread())
                    return false;
                if (w + exclusiveCount(acquires) > MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
                // Reentrant acquire
                setState(c + acquires);
                return true;
            }
            if (writerShouldBlock() ||
                !compareAndSetState(c, c + acquires))
                return false;
            setExclusiveOwnerThread(current);
            return true;
        }

释放与ReentrantLock的释放过程基本类似

==读锁的获取与释放==
==锁降级==
1.锁降级指的是写锁降级成为读锁，如果当前线程拥有写锁，然后将其释放，最后再获取读锁，这种分段完成的过程不能称为锁降级。
public void processData() {
    readLock.lock();
    if(!update) {
        //必须先释放读锁
        readLock.unlock();
        //锁降级从写锁获取到开始
        writeLock.lock();
        try {
            if(!update) {
                //准备数据的流程(略)
            }
            readLock.lock();
        } finally {
            writeLock.unlock();
        }
        //锁降级完成，写锁降级为读锁
    }

    try {
        //使用数据的流程(略)
    } finally {
        readLock.unlock();
    }

}
2.锁降级中读锁的获取是否必要呢？答案：是必要的。主要是为了保证数据的可见性，如果当前线程不获取读锁而是直接释放写锁，假设此刻另一个线程
（记作线程T）获取了写锁并修改了数据，那么当前线程无法感知线程T的数据更新。如果当前线程获取读锁，即遵循锁降级的步骤，则线程T将会被阻塞，
直到当前线程使用数据并释放读锁之后，线程T才能获取写锁进行数据更新
3.ReentrantReadWriteLock不支持锁升级（把持读锁、获取写锁，最后释放读锁的过程）。目的也是保证数据可见性。如果读锁已被多个线程获取，
其中任意线程成功获取了写锁并更新数据，则其更新对其他获取到读锁的线程是不可见的。


===LockSupport工具===







