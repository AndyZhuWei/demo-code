第5章 Java中的锁
====Lock接口===
1.锁是用来控制多个线程访问共享资源的方式。
2.在Lock接口出现之前，Java程序是靠synchronized关键字实现锁的功能的，而Java SE 5之后，并发包中新增了Lock接口（以及相关实现类）用来实现锁功能，
它提供了与synchronized关键字类似的同步功能，只是在使用时需要显示地获取和释放锁。
3.虽然缺少了（通过synchronized块或者方法提供的）隐式获取释放锁的便捷性，但是确拥有了锁获取与释放的可操作性、可中断的获取锁以及超时获取锁等多种
synchronized关键字所不具备的同步特性。而且对于一些比较复杂的获取释放锁的应用场景，Lock很容易实现。
4.在finally块中释放锁，目的是保证在获取锁之后，最终能够被释放。不要将获取锁的过程写在try块中，因为如果在获取锁（自定义锁的实现）时发生了异常，异常
抛出的同时，也会导致锁无故释放。
5.Lock接口提供synchronized关键字所不具备的主要特性如下：
a.尝试非阻塞地获取锁
b.能被中断地获取锁
c.超时获取锁


===队列同步器===
1.队列同步器AbstractQueuedSynchronizer(以下简称队列同步器)，是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示同步状态，通过FIFO
队列来完成资源获取线程的排队工作。
2.同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。
3.同步器提供的3个方法（getState()、setState(int newState)和compareAndSetState(int expect,int update)）来进行状态变量的管理，这些方法都是线程安全的。
4.子类推荐被定义为自定义同步组件的静态内部类，同步器自身没有实现任何同步接口，它仅仅是定义了若干同步状态获取和释放的方法来供自定义同步组件使用，同步器既
可以支持独占式地获取同步状态也可以支持共享式地获取同步状态。
5.同步器是实现锁（也可以是任意同步组件）的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。
6.锁是面向使用者的，它定义了使用者与锁交互的接口（比如可以允许两个线程并行访问），隐藏了实现细节；
7.同步器面向的是锁的实现者，它简化了锁的实现方式，屏蔽了同步状态管理、线程排队、等待与唤醒等底层操作。
8.锁和同步器很好地隔离了使用者和实现者锁需要关注的领域。
9.同步器的设计是基于模板方法模式的，也就是说，使用者需要继承同步器并重写指定的方法，随后将同步器组合在自定义同步组件的实现中，并调用同步器提供的模板方法，
而这些模板方法将会调用使用者重写的方法。
10.同步器可重写的方法
a.protected boolean tryAcquire(int arg):独占获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再进行CAS设置同步状态
b.protected boolean tryRelease(int arg):独占式释放同步状态，等待获取同步状态的线程将有机会获取同步状态
c.protected int tryAcquiredShared(int arg):共享式获取同步状态，返回大于等于0的值，表示获取成功，反之，获取失败
d.protected boolean tryReleaseShared(int arg):共享式释放同步状态
e.protected boolean isHeldExclusively():当前同步器是否在独占模式下被线程占用，一般该方法表示是否被当前线程所独占。
11.同步器提供的模板方法
a.void acquire(int arg):独占式获取同步状态，如果当前线程获取同步状态成功，则由该方法返回，否则，将会进入同步队列等待，该方法将会调用重写的tryAcquire(int arg)方法
b.void acquireInterruptibly(int arg):与acquire(int arg)相同，但是该方法响应中断，当前线程未获取到同步状态而进入同步队列中，如果当前线程被中断，则该方法
  会抛出InterruptedException并返回
c.boolean tryAcquireNanos(int arg,long nanos):在acquireInterruptibly(int arg)基础上增加了超时限制，如果当前线程在超时时间内没有获取到同步状态，
  那么将会返回false,如果获取到了返回true
d.void acquireShared(int arg):共享式的获取同步状态，如果当前线程未获取到同步状态，将会进入同步队列等待，与独占式获取的主要区别是在同一时刻可以有多
  个线程获取同步状态
e.void acquireSharedInterruptibly(int arg)：与acquiedShared(int arg)相同，该方法响应中断。
f.boolean tryAcquireSharedNanos(int arg,long nanos):在acquireSharedInterruptibly(int arg)基础上增加了超时限制
g.boolean release(int arg):独占式的释放同步状态，该方法会在释放同步状态之后，将同步队列中第一个节点包含的线程唤醒。
h.boolean releaseShared(int arg):共享式的释放同步状态
i.Collection<Thread> getQueuedThreads()：获取等待在同步队列上的线程集合。
12.同步器提供的模板方法基本上分为3类：独占式获取与释放同步状态、共享式获取与释放同步状态和查询同步队列中等待线程情况。
13.自定义同步组件将使用同步器提供的模板方法来实现自己的同步语义。
