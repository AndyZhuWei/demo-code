第10章  Executor框架
Java线程既是工作单元，也是执行机制。从JDK1.5开始，把工作单元与执行机制分离开来。工作单元包括Runnable和Callable.
而执行机制由Executor框架提供

===Executor框架简介===
1.Executor框架的结构
Executor框架主要由3大部分组成如下。
   任务：包括被执行任务需要实现的接口：Runnable接口或Callable接口
   任务的执行：百科任务执行机制的核心接口Executor,以及继承自Executor的ExecutorService接口。
             Executor框架有两个关键类实现了ExecutorService接口（ThreadPoolExecutor和ScheduledThreadPoolExecutor）
   异步计算的结果：包括接口Future和实现Future接口的FutureTask类


Executor是一个接口，它是Executor框架的基础，他将任务的提交与任务的执行分离开来。
ThreadPoolExecutor是线程池的核心实现类，用来执行被提交的任务
ScheduledThreadPoolExecutore是一个实现类，可以在给定的延迟后运行命令，或者定期执行命令。ScheduledThreadPoolExecutor比Timer更灵活，功能更强大
Future接口和实现Future接口的FutureTask类，代表异步计算的结果
Runnable接口和Callable接口的实现类，都可以被ThreadPoolExecutor或ScheduledTheadPoolExecutor执行

2Executor框架的成员
ThreadPoolExecutor通常由工厂类Executors来创建，可以创建3种类型的ThreadPoolExecutor:SingleThreadExecutor
               FixedThreadPool和CachedThreadPool
  FixedThreadPool:适用于为了满足资源管理的需求，而需要限制当前线程数量的应用场景，适用于负载比较重的服务器
  SingleThreadExecutor:适用于需要保证顺序地执行各个任务；并且在任意时间点，不会有多个线程是活动的应用场景
  CachedThreadPool:是大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者负载较轻的服务器。
ScheduledThreadPoolExecutor通常使用工厂类Executors来创建。可以创建2种类型的ScheduledThreadPoolExecutor
  ScheduledThreadPoolExecutor：包含若干线程的ScheduledThreadPoolExecutor，适用于需要多个后台线程执行周期任务，
                               同时为了满足资源管理的需求而限制后台线程的数量的应用场景
  SingleThreadPoolExecutor:只包含一个线程的ScheduledThreadPoolExecutor，适用于需要单个后台线程执行周期任务，
                               同时需要保证顺序执行各个任务的应用场景。
Future接口
Runnable接口和Callable接口

=====ThreadPoolExecutor详解===
1.FixedThreadPool详解
public static ExecutorService newFixedThreadPool(int nThreads) {
        return new ThreadPoolExecutor(nThreads, nThreads,
                                      0L, TimeUnit.MILLISECONDS,
                                      new LinkedBlockingQueue<Runnable>());
    }
2.SingleThreadExecutor详解
public static ExecutorService newSingleThreadExecutor() {
        return new FinalizableDelegatedExecutorService
            (new ThreadPoolExecutor(1, 1,
                                    0L, TimeUnit.MILLISECONDS,
                                    new LinkedBlockingQueue<Runnable>()));
    }
3.CachedThreadPool详解
public static ExecutorService newCachedThreadPool() {
        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                      60L, TimeUnit.SECONDS,
                                      new SynchronousQueue<Runnable>());
    }